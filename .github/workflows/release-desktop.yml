name: Release Ascella Desktop

on:
  push:
    tags: ['v[0-9]+.[0-9]+.[0-9]+*']

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BIN_NAME: ascella-desktop
  PROJECT_NAME: ascella
  REPO_NAME: Tricked-dev/ascella

jobs:
  dist:
    name: Build Ascella Desktop
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [x86_64-linux, x86_64-macos]
        include:
          - build: x86_64-linux
            os: ubuntu-20.04
            rust: nightly
            target: x86_64-unknown-linux-gnu
            cross: false
          - build: x86_64-macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
            cross: false

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          path: ascella
          submodules: true

      - name: Setup | Cache
        uses: Swatinem/rust-cache@v1
      - name: set up repos
        run: |
          mv ascella/desktop/* .
          rm -rf ascella


      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Install deps
        if: matrix.build == 'x86_64-linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq pkg-config libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
          sudo apt-get install libssl-dev pkg-config libxcb-composite0-dev libx11-dev
          sudo apt-get install desktop-file-utils zsync

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release

      - name: Strip release binary (linux and macos)
        run: strip "./target/release/$BIN_NAME"

      - name: make dist
        run: mkdir dist

      - name: Build archive
        shell: bash
        run: cp "target/release/$BIN_NAME" "dist/"
        
      - name: Build stuff
        if: matrix.build == 'x86_64-linux'
        run: |
              wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
              chmod a+x appimagetool-x86_64.AppImage
              sudo mv appimagetool-x86_64.AppImage /bin/appimagetool
              run() {
                  strip -s target/release/ascella-desktop
                  echo installing cargo $1
                  cargo install cargo-$1  &>/dev/null
                  echo Running cargo $1
                  cargo $1 
              }
              run deb
              run aur
              run appimage
              run generate-rpm
              mkdir ../dist
              mv PKGBUILD ../dist/
              mv ascella-desktop-*.AppImage ../dist/
              mv ascella-desktop-*.tar.gz ../dist/
              mv target/debian/ascella-desktop*.deb ../dist/
              mv target/generate-rpm/ascella-desktop-*.rpm ../dist/
              ls dist
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: ascella-${{ matrix.build }}
          path: dist

  publish:
    name: Publish
    needs: [dist]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: actions/download-artifact@v2

      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV
        id: tagname
      - name: test
        run: ls
      - name: Build archive
        shell: bash
        run: |
          set -ex
          mkdir dist

          mv ascella-x86_64-linux/* dist/
          tar -czvf dist/ascella-x86_64-macos.tar.xz ascella-x86_64-macos

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "::set-output name=%s::%s\n" tag-name "${GITHUB_REF#refs/tags/}"
