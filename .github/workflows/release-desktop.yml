name: Release Ascella Desktop

on:
  push:
    tags: ['v[0-9]+.[0-9]+.[0-9]+*']

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BIN_NAME: ascella
  PROJECT_NAME: ascella
  REPO_NAME: Tricked-dev/ascella

jobs:
  dist:
    name: Build Ascella Desktop
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [x86_64-linux, x86_64-macos]
        include:
          - build: x86_64-linux
            os: ubuntu-20.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false
          - build: x86_64-macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            cross: false
          # Windows builts dont work properly, x86_64-windows
          # - build: x86_64-windows
          #   os: windows-2019
          #   rust: stable
          #   target: x86_64-pc-windows-msvc
          #   cross: false

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Install deps
        if: matrix.build == 'x86_64-linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq pkg-config libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
          sudo apt-get install libssl-dev pkg-config libxcb-composite0-dev libx11-dev

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: test
          args: --release --target ${{ matrix.target }} --manifest-path ./apps/desktop/Cargo.toml

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --target ${{ matrix.target }} --manifest-path ./apps/desktop/Cargo.toml
      - run: mv ./apps/desktop/target .

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux' || matrix.build == 'x86_64-macos'
        run: strip "target/${{ matrix.target }}/release/$BIN_NAME"

      - name: Strip release binary (arm)
        if: matrix.build == 'aarch64-linux'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:${{ matrix.target }} \
            aarch64-linux-gnu-strip \
            /target/${{ matrix.target }}/release/$BIN_NAME

      - run: mv target/ ./apps/desktop/target

      - name: Install Wix
        if: matrix.build == 'x86_64-windows'
        uses: actions/checkout@v2
        with:
          repository: fbarresi/wix
          path: wix
      - name: Setup .NET Core
        if: matrix.build == 'x86_64-windows'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101

      - name: install cargo wix
        if: matrix.build == 'x86_64-windows'
        run: cargo install cargo-wix
      - name: run wix command
        if: matrix.build == 'x86_64-windows'
        run: |
          cd apps/desktop
          cargo wix init
          cargo wix

      - name: make dist
        run: mkdir dist

      - run: mv ./apps/desktop/target .

      # - name: Run install pkgbuild
      #   if: matrix.build == 'x86_64-linux'
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: install
      #     args: cargo-pkgbuild
      # - name: Make pkgbuild
      #   if: matrix.build == 'x86_64-linux'
      #   run: cargo pkgbuild
      # - name: cp pkgbuild
      #   if: matrix.build == 'x86_64-linux'
      #   run: mv PKGBUILD dist/

      - name: Build archive
        shell: bash
        run: |

          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp target/wix/ascella* dist/
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi
      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux'
        run: chmod +x ./.github/workflows/linux.sh && ./.github/workflows/linux.sh
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: ascella-${{ matrix.build }}
          path: dist

  publish:
    name: Publish
    needs: [dist]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: actions/download-artifact@v2

      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV
        id: tagname
      - name: test
        run: ls
      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist

          mv ascella* dist/
          mv LICENS* dist/
          # for dir in ascella-* ; do
          #     mv * dist/

          #     # platform=${dir#"ascella-"}
          #     # if [[ $platform =~ "windows" ]]; then
          #     #     exe=".exe"
          #     # fi
          #     # ls
          #     # pkgname=$PROJECT_NAME-$platform
          #     # mkdir tmp/$pkgname
          #     # # cp LICENSE README.md tmp/$pkgname
                mv ascella-$platform/* dist/
          #     # [ -f ascella-$platform/ascella-* ] && mv ascella-$platform/ascella-* tmp/$pkgname/
          #     # [ -f ascella-$platform/ascella_* ] && mv ascella-$platform/ascella_* tmp/$pkgname/
          #     # [ -f ascella-$platform/ascella-*.msi ] && mv ascella-$platform/*.msi tmp/$pkgname/
          #     # [ -f ascella-$platform/PKGBUILD ] && mv ascella-$platform/PKGBUILD tmp/$pkgname/

          #     # mv ascella-$platform/$BIN_NAME$exe tmp/$pkgname
          #     # chmod +x tmp/$pkgname/$BIN_NAME$exe

          #     # if [ "$exe" = "" ]; then
                  
          #     #     tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
          #     # else
          #     #     (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
          #     # fi
          # done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "::set-output name=%s::%s\n" tag-name "${GITHUB_REF#refs/tags/}"
